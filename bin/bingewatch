#! /usr/bin/env perl6

# Copyright (C) 2018, 2019 Michael Clarke
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License Version 3, as
# published by the Free Software Foundation.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use WWW;
use XML::XPath;
use Terminal::Print;

my $screen = Terminal::Print.new;

multi MAIN(Bool :$help) {
    run $*EXECUTABLE, '--doc', $*PROGRAM;
}

multi MAIN (Str:D $channel) {
    binge @$channel;
}
multi MAIN {
    binge $*HOME.add(".config/bingewatch/channels.txt").slurp.lines;
}

sub binge (@channels-list) {
    $screen.initialize-screen;
    my $progress-chan = start-progress-monitor;

    for @channels-list -> $channel {
        my $feed;
        my $name;

        given $channel {
            when m/^\h*\#/ {
                # Skip comment lines
                next;
            }
            when m/^(\w+) \h+ (<[\w\-]>+)/ {
                $name  = $0.lc;
                $feed = "https://www.youtube.com/feeds/videos.xml?channel_id=$1";
            }
            default {
                $name = $_.lc;
                $feed = "https://www.youtube.com/feeds/videos.xml?user=$_";
            }
        }
        mkdir $name;
        indir $name, {
            process-feed $name, $feed, $progress-chan;
        }
    }

    $screen.shutdown-screen;
}

sub start-progress-monitor {
    my $chan = Channel.new;
    my $tick = Supply.interval: 1;
    my $id-width = 15;
    my %latest;

    start {
        react {
            whenever $tick {
                my $row = 2; # Gives space for channel url in first row

                for %latest.kv -> $id, $msg {
                    my $msg-width = $screen.columns - $id-width;

                    $screen.print-string(0, $row,
                        sprintf("%-{$id-width}s%-{$msg-width}.{$msg-width}s", $id, $msg)
                    );

                    $row++;
                }
            }
            whenever $chan -> $msg {
                given $msg {
                    when :("NEWFEED", Str) {
                        %latest := {};
                        Terminal::Print.clear-screen;
                        $screen.print-string(0, 0, $msg[1]);
                    }
                    when :(Str, Str) {
                        %latest{$msg[0]} = $msg[1];
                    }
                }
            }
        }
    }

    return $chan;
}

sub process-feed(Str:D $name, Str:D $url, Channel:D $progress-chan) {
    $progress-chan.send: ("NEWFEED", $name);

    my $feed = get $url or snuff "Error fetching $url: " ~ $feed.exception;

    my $xpath = XML::XPath.new(xml => $feed);
    $xpath.set-namespace("media" => "http://search.yahoo.com/mrss/");

    await $xpath.find('//media:content/@url', :to-list).map: -> $url {
        download $url.split('?').first, $progress-chan;
    }

    CATCH {
        snuff "Failed to start youtube-dl process: $_";
    }
}

sub download(Str:D $url, Channel:D $progress-chan) {
    my $id = $url.split('/').reverse.first;

    # We already have the file
    return Promise.kept if dir().grep(/__$id\./);

    my $proc = Proc::Async.new("youtube-dl", "--newline", "--restrict-filenames",
        "-o", '%(upload_date)s-%(title)s__%(id)s.%(ext)s', $url);
    $proc.stdout.lines.tap: { $progress-chan.send: ($id, $_) }
    $proc.stderr.lines.tap: { $progress-chan.send: ($id, $_) }

    my $promise = $proc.start;
    $promise.Supply.tap(
        {;}, # We don't care about the main tap; only when we're done
        done => { $progress-chan.send: ($id, "Done.") },
        quit => { $progress-chan.send: ($id, "Failed.") }
    );

    return $promise;
}

# Like die, but clean up the terminal before expiring.
sub snuff (Str $e) {
    $screen.shutdown-screen;
    $*ERR.say: $e;
    exit 1;
}

=begin pod

=NAME bingewatch - bulk download videos for offline viewing

=begin Synopsis

B<bingewatch> [U<USER>]

B<bingewatch> [U<--help>]

=end Synopsis

=begin Description

bingewatch allows bulk-downloading videos from YouTube in parallel,
so you can easily synchronise videos from specific users or channels
to watch later when you might have poor or no connectivity.

=end Description

=begin Options

=defn --help
Show this help

=end Options

=begin Configuration

If no arguments are specified and F<$HOME/.config/bingewatch/channels.txt>
exists, bingewatch will read that file and treat each line as a user
or channel to synchronise.

Any line where the first non-whitespace character is '#' is treated as a
comment and ignored.

There are two types of non-comment line:

=begin item 
A line containing only a single word is treated as a YouTube I<user>.

For example:

=begin code
ClojureTV
=end code
=end item

=begin item
A line containing two words is treated as a I<channel>.

The first word is a friendly name that will be used to identify the channel in
bingewatch's interface and to name the directory in which downloaded videos
will be stored.

The second word is YouTube's channel ID.

For example: 

=begin code
3brown1blue  UCYO_jab_esuFRV4b17AJtAw
=end code
=end item

=end Configuration

=begin Homepage

L<https://github.com/clarkema/bingewatch>

Please report bugs and feature requests in the issue tracker.

=end Homepage

=AUTHOR

Mike Clarke <clarkema@clarkema.org>

=end pod
